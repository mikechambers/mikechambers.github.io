---
title: 'Tutorial : Using JSON with Flex 2 and ActionScript 3'
author: mikechambers
date: 2006-03-28 12:56:01 -0800
layout: post
permalink: /2006/03/28/tutorial-using-json-with-flex-2-and-actionscript-3/
categories:
  - General
---


One of the little gems you will find in the [open source ActionScript 3 libraries][1] that we released on labs, is the JSON class found in the [corelib library][2]. This class, written for Adobe by [Darron Schall][3], makes it super simple to both serialize and de-serialize [JSON data][4].

What is JSON you ask? From the [JSON website][4]:

*JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition &#8211; December 1999. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. These properties make JSON an ideal data-interchange language.*

In a nutshell, JSON is a way to serialize data using JavaScript syntax. It is fairly compact, and easy to use. Furthermore, it has become increasingly popular due to the growth of AJAX applications, and the browser&#8217;s native support of de-serializing JSON (via eval()).  
<!--more-->

  
If you look on the main page of my weblog, the Reading / Doing section on the left is actually a small AJAX widget I created that shows my latests [diggs][5], [delicious bookmarks][6], and items added to my [ta-da lists][7]. It gets its data from a [JSON feed on the server][8], which is periodically generated by a PHP file.

So, to show how to use JSON within a Flex / Flash application, we will load the JSON feed from my site into Flash and display it in a datagrid. Nothing earth shattering, but it will show how easy it is to use JSON. I am not assuming that you know anything about Flex / ActionScript or JSON. Because of this, the tutorial will be pretty long, as I want to make sure I cover every step of the process.

<div align="center">
  <a href="http://weblogs.macromedia.com/mesh/files/flex/jsonexample/"><img src="/mesh/files/flex/jsonexample/jsonexample.png" border="0" height="201" width="350" /></a>
</div>

You can view the completed example [here][9]. (Requires [Flash Player 8.5 beta 2][10]).

First, you need to make sure you have the following installed:

*   [Flex Builder or MXMLC command line compiler][10]
*   [Flash Player 8.5][10]
*   [corelib ActionScript 3 library][2]

You can grab Flex Builder and MXMLC from [labs][10] (the MXMLC compiler is included with the Flex Builder install, and also in the SDK download (in case you are on MAC or Linux).

Once you download the zip file for the corelib library, unzip it and you should see three subfolders: src, bins, docs. 

*   src : contains the source code for the library
*   bin : contains a compiled SWC of the library (you can think of this as a DLL)
*   docs : contains the API docs for the library

You can link the project against either the source, or the SWC. For this example, we will use the SWC since we don&#8217;t need to edit the source code any.

Once Flex Builder is install, open it and make sure that you are in the Flex Development perspective.

Window > Open Perspective > Flex Development

Next, make sure the navigator view is open (it is usually on the left). This view shows all of your projects and files. If the view is not open, you can open it via:

Window > Show View > Navigator

Right click in the navigator and select:

New > Flex Project

Name the Project &#8220;JSONExample&#8221; and make sure &#8220;Use default location&#8221; is checked.

Then, click the &#8220;Next&#8221; button (not finish), this takes us to a screen that will allow us to add items to our class path, or to link against libraries. (you can access this at anytime, by selecting the project, and then selecting Project > Properties).

Select the Libraries tab, and click Add SWC. Browser to the corelib.swc file which was including in the bin directory of the corelib zip file. Click the Finish button.

The first thing we need to do is to add a datagrid to display the data. Our grid will contain two columns. One for the title, and one for the type of service (delicious, digg, tada).

Make sure that the JSONExample.mxml file is open in the editor (double click it in the Navigator), and then switch to design view (click the Design button in the top left of the editor). This brings us to design view which allows us to visually layout and manipulate our components. 

Once you are in design view, you should see a Components view. If not, you can open it via Window > Show View > Components. This view contains all of the built in (and any custom components) that are available to the project. Select a DataGrid component from the Controls folder and drag it onto the stage. Once on the stage, resize it so that it takes up most of the space. The grid should snap to the edges when it gets close.

Make sure the grid is selected then go to the Flex Properties view. It should be open on the right, but if it isn&#8217;t you can open it via Window > Show Views > Flex Properties. We need to do two things here:

1.  Give the control an ID
2.  Set the layout constrains

Select the Id field at the top of the Flex Properties panel, and enter &#8220;grid&#8221;. This basically gives the grid a variable name so that other controls and ActionScript can reference it.

Next, scroll all the way to the bottom of the Flex Properties view to the Layout section. This will show your component with anchor points. Make sure that the following check boxes are checked:

*   Top Right
*   Top Left
*   Left Top
*   Left Bottom

This basically tells the controls to keeps its sides the same distance from the application&#8217;s sides, even if the app / windows resizes.

At this point, we are ready to switch back to source view, and load the JSON data. So, switch back to source view (click the Source button in the top left of the editor).

You code should now look something like this:

`
<pre>
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" layout="absolute">
	<mx:DataGrid id="grid" right="10" left="10" top="10" bottom="10">
		<mx:columns>
			<mx:DataGridColumn headerText="Column 1" dataField="col1"/>
			<mx:DataGridColumn headerText="Column 2" dataField="col2"/>
			<mx:DataGridColumn headerText="Column 3" dataField="col3"/>
		</mx:columns>
	</mx:DataGrid>
</mx:Application>
</pre>
<p>`

Lets add an HTTPService tag to actually load the data. Add the following tag right under the Application tag.

`
<pre>
	<mx:HTTPService id="service" resultFormat="text" 
					url="http://weblogs.macromedia.com/mesh/mashedpotato.json"
					result="onJSONLoad(event)" />
</pre>
<p>`

If you save this, you should get an error in the problems view (Window > Show Views > Problems):

`Call to a possibly undefined method 'onJSONLoad'`

This is ok. We just need to define the onJSONLoad event handler. But first, lets look at the code we just wrote:

*   id &#8211; Give the control a variable name so we can reference it later.
*   url &#8211; the url that points to the JSON data we are loading
*   resultFormat &#8211; the format that we want the data returned to us in. (In this case, just the raw text).
*   result &#8211; event handler that is called when the data loads.

At this point, your code should look something like this:

`
<pre>
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" layout="absolute">

	<mx:HTTPService id="service" resultFormat="text" 
					url="http://weblogs.macromedia.com/mesh/mashedpotato.json"
					result="onJSONLoad(event)" />

	<mx:DataGrid id="grid" right="10" left="10" top="10" bottom="10">
		<mx:columns>
			<mx:DataGridColumn headerText="Column 1" dataField="col1"/>
			<mx:DataGridColumn headerText="Column 2" dataField="col2"/>
			<mx:DataGridColumn headerText="Column 3" dataField="col3"/>
		</mx:columns>
	</mx:DataGrid>
</mx:Application>
</pre>
<p>`

Next, we need to create a script block to define our event handler function. Add a Script tag block just below the Application tag:

`
<pre>
	<mx:Script>
		<![CDATA[
			
		]]>
	</mx:Script>
</pre>
<p>`

and then inside the Script block, lets define our event handler. You script block should now look like this:

`
<pre>
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			
			private function onJSONLoad(event:ResultEvent):void
			{
			}
		]]>
	</mx:Script>
</pre>
<p>`

If you look at the [API docs][11], ResultEvent is the type of event broadcast when the data has loaded from the service.

Next, all we need to do is:

*   Get the raw JSON data from the URL
*   De-serialize it from JSON to ActionScript
*   Set the data as the dataProvider for the grid

Here is the completed function, with comments:

`
<pre>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import com.adobe.serialization.json.JSON;
			
			private function onJSONLoad(event:ResultEvent):void
			{
				//get the raw JSON data and cast to String
				var rawData:String = String(event.result);
				
				//decode the data to ActionScript using the JSON API
				//in this case, the JSON data is a serialize Array of Objects.
				var arr:Array = (JSON.decode(rawData) as Array);
				
				//create a new ArrayCollection passing the de-serialized Array
				//ArrayCollections work better as DataProviders, as they can
				//be watched for changes.
				var dp:ArrayCollection = new ArrayCollection(arr);
				
				//pass the ArrayCollection to the DataGrid as its dataProvider.
				grid.dataProvider = dp;
				
			}
		]]>
	</mx:Script>
</pre>
<p>`

Notice that we also added some import statements to bring in the relevant classes.

The actual JSON de-serialization part is pretty trivial and consists of this one line of code:

`
<pre>var arr:Array = (JSON.decode(rawData) as Array);</pre>
<p>`

JSON.decode returns a Object (since it doesn&#8217;t know before hand what it will be de-serializing), so we have to cast the result to an Array using the &#8220;as&#8221; operator. (can&#8217;t cast using Array() for legacy reasons).

At this point, we only have two things left to do:

1.  Actually tell the service to load the data.
2.  Customize the DataGrid to map to the data we are passing it.

Telling the service to load the data is easy. Since we want it to load the data as soon as the app loads, we can just specify in in the creationComplete event for the app (this is called once the app has been loaded and the controls laid out). (You can think of this as the same as onload in HTML / JavaScript).

We just need to add this attribute to the Application tag:

`
<pre>creationComplete="service.send()"</pre>
<p>`

Remember that service is the id / variable name for our HTTPService control. Basically, this says when the app has loaded and initialized, tell the HTTPService control to load its data.

Finally, we need to tweak the DataGrid to show our data. In this case, we only need to tweak the columns within the DataGrid.

First, remove one of the three column tags, since we only need two. 

Next, we need to add better column heading titles (through the headingText attribute), and map each column to a property in the data we loaded. If you look at the JSON data, you can see the following fields in each item:

*   title
*   src
*   url
*   date

For this example, we will just show the source and title. We specify this for each column through the dataField property. So, the new columns should look like this:

`
<pre>
			<mx:DataGridColumn headerText="Service" dataField="src"/>
			<mx:DataGridColumn headerText="Title" dataField="title"/>
</pre>
<p>`

Basically, this tells the first column to use Service as the column title, and get its data from the &#8220;src&#8221; property of the loaded data. The second column gets it data from the title property.

The completed code should now look like this:

`
<pre>
<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" layout="absolute"
	creationComplete="service.send()">

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import com.adobe.serialization.json.JSON;
			
			private function onJSONLoad(event:ResultEvent):void
			{
				//get the raw JSON data and cast to String
				var rawData:String = String(event.result);
				
				//decode the data to ActionScript using the JSON API
				//in this case, the JSON data is a serialize Array of Objects.
				var arr:Array = (JSON.decode(rawData) as Array);
				
				//create a new ArrayCollection passing the de-serialized Array
				//ArrayCollections work better as DataProviders, as they can
				//be watched for changes.
				var dp:ArrayCollection = new ArrayCollection(arr);
				
				//pass the ArrayCollection to the DataGrid as its dataProvider.
				grid.dataProvider = dp;
				
			}
		]]>
	</mx:Script>

	<mx:HTTPService id="service" resultFormat="text" 
					url="http://weblogs.macromedia.com/mesh/mashedpotato.json"
					result="onJSONLoad(event)" />

	<mx:DataGrid id="grid" right="10" left="10" top="10" bottom="10">
		<mx:columns>
			<mx:DataGridColumn headerText="Service" dataField="src"/>
			<mx:DataGridColumn headerText="Title" dataField="title"/>
		</mx:columns>
	</mx:DataGrid>
</mx:Application>
</pre>
<p>`

If you debug / run your app, you should see a datagrid that contains all of the data from the JSON feed. (You can debug by clicking the little Bug icon on the toolbar, or selecting Run > Debug).

If you are feeling generous, you can also easily publish your source code. Go back to Flex Builder, and select the JSONExample. Then select Project > Publish Application Source. Once you do this, re-run your application, and then right click on it and select View Source.

This is a pretty simple example, but it shows how easy de-serializing JSON in ActionScript is (serialization is just as easy).

<div align="center">
  <a href="http://weblogs.macromedia.com/mesh/files/flex/jsonexample/screencast/"><img src="/mesh/files/flex/jsonexample/screencast.png" border="0" height="236" width="300" /></a>
</div>

Updated : You can also view a [screencast of this tutorial][12].

Here are the links for the resources used in the tutorial:

*   [Flex Builder or MXMLC command line compiler][10]
*   [Flash Player 8.5][10]
*   [corelib ActionScript 3 library][2]

I will update the post with images a little later, and am considering doing a screencast of building the example.

**[If you liked the tutorial, make sure to digg it.][13]**

Post any questions, suggestions and / or corrections in the comments.

 [1]: http://weblogs.macromedia.com/mesh/archives/2006/03/new_open_source.cfm#more
 [2]: http://labs.macromedia.com/wiki/index.php/ActionScript_3:resources:apis:libraries#corelib
 [3]: http://www.darronschall.com
 [4]: http://www.json.org
 [5]: http://www.digg.com
 [6]: http://del.icio.us/mikechambers
 [7]: http://mesh.tadalist.com/lists/show/203096
 [8]: http://weblogs.macromedia.com/mesh/mashedpotato.json
 [9]: http://weblogs.macromedia.com/mesh/files/flex/jsonexample/
 [10]: http://www.macromedia.com/go/labs_flex2_downloads
 [11]: http://livedocs.macromedia.com/labs/1/flex/langref/index.html
 [12]: http://weblogs.macromedia.com/mesh/files/flex/jsonexample/screencast/
 [13]: http://digg.com/programming/Tutorial_:_Using_JSON_with_Flex_2_and_ActionScript_3
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flex | Mike Chambers]]></title>
  <link href="http://mikechambers.github.io//blog/blog/categories/flex/atom.xml" rel="self"/>
  <link href="http://mikechambers.github.io//blog/"/>
  <updated>2013-12-15T20:49:44-08:00</updated>
  <id>http://mikechambers.github.io//blog/</id>
  <author>
    <name><![CDATA[Mike Chambers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Defining and Reusing Symbols in Flex 4 FXG]]></title>
    <link href="http://mikechambers.github.io//blog/2008/08/29/defining-and-reusing-symbols-in-flex-4-fxg/"/>
    <updated>2008-08-29T00:00:00-07:00</updated>
    <id>http://mikechambers.github.io//blog/2008/08/29/defining-and-reusing-symbols-in-flex-4-fxg</id>
    <content type="html"><![CDATA[<p>If you have done Flash development using the Flash Authoring tool, or have done any low level work with the SWF format, then you should be familiar with the concept of symbols. Basically a symbol is a reusable object (graphics, buttons, MovieClip) that can be included in the SWF once, but referenced and used many times.</p>

<p>Flex 4 <a href="http://opensource.adobe.com/wiki/display/flexsdk/FXG+1.0+Specification">FXG</a> has a similar concept of symbol, although the actual underlying implimentation is different. Using the <code>Library</code> and <code>Definition</code> elements, you can define a graphic symbol, which can then be reused multiple times within the FXG or MXML document.</p>

<!--more-->


<p>For example, here is our <a href="http://www.mikechambers.com/blog/2008/08/28/getting-started-with-flex-4-fxg-and-flex-builder-3/">HelloWorld example from yesterday</a>, which uses a symbol to display the content, as opposed to just generating it inline:</p>

<div class="highlight">
  <pre><span style="color: #BC7A00">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span style="color: #008000; font-weight: bold">&lt;Application</span> 
    <span style="color: #7D9029">xmlns:mx=</span><span style="color: #BA2121">"library:adobe/flex/halo"</span>
    <span style="color: #7D9029">xmlns=</span><span style="color: #BA2121">"http://ns.adobe.com/mxml/2009"</span>
    <span style="color: #7D9029">xmlns:gumbo=</span><span style="color: #BA2121">"library:adobe/flex/gumbo"</span><span style="color: #008000; font-weight: bold">&gt;</span>

    <span style="color: #008000; font-weight: bold">&lt;Library&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;Definition</span> <span style="color: #7D9029">name=</span><span style="color: #BA2121">"HelloWorldText"</span><span style="color: #008000; font-weight: bold">&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;gumbo:Group&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;TextGraphic</span> <span style="color: #7D9029">fontFamily=</span><span style="color: #BA2121">"Verdana"</span> <span style="color: #7D9029">fontWeight=</span><span style="color: #BA2121">"bold"</span><span style="color: #008000; font-weight: bold">&gt;</span>
                    <span style="color: #008000; font-weight: bold">&lt;content&gt;</span>Hello, World<span style="color: #008000; font-weight: bold">&lt;/content&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;/TextGraphic&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;/gumbo:Group&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;/Definition&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;/Library&gt;</span>

    <span style="color: #408080; font-style: italic">&lt;!-- Flex 4 Hello World with FXG --&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:Canvas</span> <span style="color: #7D9029">top=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">bottom=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">left=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">right=</span><span style="color: #BA2121">"0"</span><span style="color: #008000; font-weight: bold">&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;gumbo:Group</span> <span style="color: #7D9029">verticalCenter=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">horizontalCenter=</span><span style="color: #BA2121">"0"</span><span style="color: #008000; font-weight: bold">&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;HelloWorldText</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;/gumbo:Group&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;/mx:Canvas&gt;</span>
    
    <span style="color: #408080; font-style: italic">&lt;!-- reference the symbol again --&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;gumbo:Group</span> <span style="color: #7D9029">left=</span><span style="color: #BA2121">"5"</span> <span style="color: #7D9029">bottom=</span><span style="color: #BA2121">"5"</span><span style="color: #008000; font-weight: bold">&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;HelloWorldText</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;/gumbo:Group&gt;</span>
<span style="color: #008000; font-weight: bold">&lt;/Application&gt;</span>
</pre>
</div>


<p>Pay attention to the namespace usage as right now, it can be a little tricky.</p>

<p>Notice that once we define a symbol, we can then reuse it multiple times by referencing its name attribute as if it was a native FXG element.</p>

<p>A <code>Library</code> element must contain one of more <code>Definition</code> elements. A <code>Definition</code> element must have a <code>name</code> attribute and contain one <code>Group</code> element.</p>

<p>One thing to keep in mind, is that currently, this is code that is executed at runtime, and thus underneath the hood, FXG is not creating actual SWF symbols at compile time. However, that is something that we are looking at to optimize working with static assets.</p>

<p>You can of course, read more details on this in the <a href="http://opensource.adobe.com/wiki/display/flexsdk/FXG+1.0+Specification">FXG 1.0 Specification</a>.</p>

<p>I also have a post on how to <a href="http://www.mikechambers.com/blog/2008/08/28/getting-started-with-flex-4-fxg-and-flex-builder-3/">get started with Flex 4 FXG in Flex Builder 3</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Binding With FXG in Flex 4]]></title>
    <link href="http://mikechambers.github.io//blog/2008/08/29/data-binding-with-fxg-in-flex-4/"/>
    <updated>2008-08-29T00:00:00-07:00</updated>
    <id>http://mikechambers.github.io//blog/2008/08/29/data-binding-with-fxg-in-flex-4</id>
    <content type="html"><![CDATA[<p>One of the cool things about <a href="http://opensource.adobe.com/wiki/display/flexsdk/FXG+1.0+Specification">FXG</a> is that it works with Flex data-binding just as your would expect it to.</p>

<p>Below is a simple example (which requires <a href="http://labs.adobe.com/technologies/flashplayer10/">Flash Player 10 RC</a>), followed the code, that shows data-binding with FXG and <a href="http://www.mikechambers.com/blog/2008/08/27/everything-there-is-to-know-about-flex-4-gumbo/">Flex 4</a>:</p>

<!--more-->


<p>As you can see, there are still some bugs in the rendering, but that is to be expected as these are very early Flex 4 builds.</p>

<p>Source</p>

<div class="highlight">
  <pre><span style="color: #BC7A00">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span style="color: #008000; font-weight: bold">&lt;mx:Application</span> 
    <span style="color: #7D9029">xmlns:mx=</span><span style="color: #BA2121">"library:adobe/flex/halo"</span>
    <span style="color: #7D9029">xmlns=</span><span style="color: #BA2121">"http://ns.adobe.com/mxml/2009"</span>
    <span style="color: #7D9029">xmlns:gumbo=</span><span style="color: #BA2121">"library:adobe/flex/gumbo"</span> 
    <span style="color: #7D9029">verticalCenter=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">horizontalCenter=</span><span style="color: #BA2121">"0"</span>
    <span style="color: #7D9029">layout=</span><span style="color: #BA2121">"vertical"</span><span style="color: #008000; font-weight: bold">&gt;</span>

    <span style="color: #008000; font-weight: bold">&lt;gumbo:Group</span> <span style="color: #7D9029">verticalCenter=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">horizontalCenter=</span><span style="color: #BA2121">"0"</span><span style="color: #008000; font-weight: bold">&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;Rect</span> <span style="color: #7D9029">width=</span><span style="color: #BA2121">"300"</span> <span style="color: #7D9029">height=</span><span style="color: #BA2121">"200"</span> <span style="color: #7D9029">radiusX=</span><span style="color: #BA2121">"{radiusSlider.value}"</span> 
            <span style="color: #7D9029">radiusY=</span><span style="color: #BA2121">"{radiusSlider.value}"</span><span style="color: #008000; font-weight: bold">&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;fill&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;SolidColor</span> <span style="color: #7D9029">color=</span><span style="color: #BA2121">"{fillColor.selectedColor}"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;/fill&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;stroke&gt;</span>
                <span style="color: #008000; font-weight: bold">&lt;SolidColorStroke</span> <span style="color: #7D9029">weight=</span><span style="color: #BA2121">"{strokeSlider.value}"</span> 
                    <span style="color: #7D9029">color=</span><span style="color: #BA2121">"{strokeColor.selectedColor}"</span> <span style="color: #7D9029">alpha=</span><span style="color: #BA2121">"1"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
            <span style="color: #008000; font-weight: bold">&lt;/stroke&gt;</span>
        <span style="color: #008000; font-weight: bold">&lt;/Rect&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;/gumbo:Group&gt;</span>
    
    <span style="color: #008000; font-weight: bold">&lt;mx:Label</span> <span style="color: #7D9029">text=</span><span style="color: #BA2121">"Corner Radius"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:HSlider</span> <span style="color: #7D9029">minimum=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">maximum=</span><span style="color: #BA2121">"100"</span> <span style="color: #7D9029">id=</span><span style="color: #BA2121">"radiusSlider"</span> <span style="color: #7D9029">liveDragging=</span><span style="color: #BA2121">"true"</span><span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:Label</span> <span style="color: #7D9029">text=</span><span style="color: #BA2121">"Stroke Weight"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:HSlider</span> <span style="color: #7D9029">minimum=</span><span style="color: #BA2121">"0"</span> <span style="color: #7D9029">maximum=</span><span style="color: #BA2121">"20"</span> <span style="color: #7D9029">value=</span><span style="color: #BA2121">"5"</span> <span style="color: #7D9029">id=</span><span style="color: #BA2121">"strokeSlider"</span> <span style="color: #7D9029">liveDragging=</span><span style="color: #BA2121">"true"</span><span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:Label</span> <span style="color: #7D9029">text=</span><span style="color: #BA2121">"Stroke Color"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:ColorPicker</span> <span style="color: #7D9029">id=</span><span style="color: #BA2121">"strokeColor"</span> <span style="color: #7D9029">selectedColor=</span><span style="color: #BA2121">"0x333333"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:Label</span> <span style="color: #7D9029">text=</span><span style="color: #BA2121">"Fill Color"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>
    <span style="color: #008000; font-weight: bold">&lt;mx:ColorPicker</span> <span style="color: #7D9029">id=</span><span style="color: #BA2121">"fillColor"</span> <span style="color: #7D9029">selectedColor=</span><span style="color: #BA2121">"0x999999"</span> <span style="color: #008000; font-weight: bold">/&gt;</span>

<span style="color: #008000; font-weight: bold">&lt;/mx:Application&gt;</span>
</pre>
</div>


<p>You can of course, read more details on this in the <a href="http://opensource.adobe.com/wiki/display/flexsdk/FXG+1.0+Specification">FXG 1.0 Specification</a>.</p>

<p>I also have a post on how to <a href="http://www.mikechambers.com/blog/2008/08/28/getting-started-with-flex-4-fxg-and-flex-builder-3/">get started with Flex 4 FXG in Flex Builder 3</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everything There Is to Know About Flex 4 / Gumbo]]></title>
    <link href="http://mikechambers.github.io//blog/2008/08/27/everything-there-is-to-know-about-flex-4-gumbo/"/>
    <updated>2008-08-27T00:00:00-07:00</updated>
    <id>http://mikechambers.github.io//blog/2008/08/27/everything-there-is-to-know-about-flex-4-gumbo</id>
    <content type="html"><![CDATA[<p>About a month ago, the Flex team <a href="http://blogs.adobe.com/flex/archives/2008/07/more_information_on_next_versi.html">announced</a> that nightly builds of the next version of Flex (code named Gumbo) were now available on the <a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo">opensource Flex site</a>. Along with early versions of the SDK, the team also posted a ton of other information, including specs and API docs.</p>

<p>Below is a listing of links and resources about Gumbo / Flex 4. Going through these will quickly get your up to speed on what is being worked on in Flex 4, and get your ready for playing around with the new builds.</p>

<!--more-->


<p>Official opensource project page<br/>
<a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo">http://opensource.adobe.com/wiki/display/flexsdk/Gumbo</a></p>

<p>Flex 4 Downloads<br/>
<a href="http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+4">http://opensource.adobe.com/wiki/display/flexsdk/Download+Flex+4</a></p>

<p>Gumbo Themes<br/>
<a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Themes">http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Themes</a></p>

<p>An Introduction to the Gumbo Component Architecture<br/>
<a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Component+Architecture">http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Component+Architecture</a></p>

<p>Flex 4 Language / API Reference<br/>
<a href="http://livedocs.adobe.com/flex/gumbo/langref/">http://livedocs.adobe.com/flex/gumbo/langref/</a></p>

<p><strong>Videos</strong><br/>
The Next Dimension of Rich Experiences (360 Flex Keynote) Mark Anders<br/>
<a href="http://link.brightcove.com/services/link/bcpid1753161885/bctid1741161343">http://link.brightcove.com/services/link/bcpid1753161885/bctid1741161343</a></p>

<p>Flex SDK Next Plan (Matt Chotin)<br/>
<a href="http://flexorg.wip3.adobe.com/gumbo/gumboplan.htm">http://flexorg.wip3.adobe.com/gumbo/gumboplan.htm</a></p>

<p>Flex 4 Skinning Architechture : Deepa Subramaniam<br/>
<a href="http://bit.ly/46xv4V">http://bit.ly/46xv4V</a></p>

<p>Designer / Developer Workflow in Flex 4 (Ely Greenfield)<br/>
<a href="http://bit.ly/zM2h2">http://bit.ly/zM2h2</a></p>

<p><strong>Feature Specifications</strong></p>

<ul>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/FXG+1.0+Specification">FXG 1.0</a> (Graphic Interchange Format)</li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Skinning">Skinning and Skinnable Components</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Enhanced+States+Syntax">Enchanced States Syntax</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Group+Specification">Group Containter</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+ItemsComponent+and+Selector">Items Component and Selector</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Layout">Layout Interface</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Application">Application Component</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Text+Primitives">Text Primitives</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+TextInput">TextInput Component</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+TextArea">TextArea Component</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+ScrollBar">ScrollBar Component</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Range">Range Class</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+TrackBase">Track Base Class</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Slider">Slider Component</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+Spinner">Spinner Component</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/Gumbo+NumericStepper">Numeric Stepper Component</a></li>
<li><a href="http://opensource.adobe.com/wiki/display/flexsdk/MXML+2009">MXML 2009</a></li>
</ul>


<p>Podcast : The Future of Flex : Matt Chotin on the Flex Show<br/>
<a href="http://www.theflexshow.com/blog/index.cfm/2008/7/30/The-Flex-Show--Episode-49-The-Future-of-Flex-with-Matt-Chotin">http://www.theflexshow.com/blog/index.cfm/2008/7/30/The-Flex-Show&#8211;Episode-49-The-Future-of-Flex-with-Matt-Chotin</a></p>

<p><strong>More Resources</strong><br/>
Flex Developer Forums<br/>
<a href="http://www.adobeforums.com/webx/.3c060f85/">http://www.adobeforums.com/webx/.3c060f85/</a></p>

<p>Flex Team Blog<br/>
<a href="http://blogs.adobe.com/flex/">http://blogs.adobe.com/flex/</a></p>

<p>Sean Moore also has a good link round up on his <a href="http://seantheflexguy.com/blog/2008/08/02/flex-4-gumbo-link-roundup-from-getting-started-to-skinning/">blog</a>.</p>

<p>If you have any more resources or links, post them in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flex Builder 2 Free for Students and Educators]]></title>
    <link href="http://mikechambers.github.io//blog/2007/10/24/flex-builder-2-free-for-students-and-educators/"/>
    <updated>2007-10-24T00:00:00-07:00</updated>
    <id>http://mikechambers.github.io//blog/2007/10/24/flex-builder-2-free-for-students-and-educators</id>
    <content type="html"><![CDATA[<p>From the press release:</p>

<blockquote><p>Adobe Systems Incorporated (Nasdaq:ADBE) today announced that it is offering AdobeÂ® Flexâ„¢ Builderâ„¢ 2 software at no cost to students and faculty at educational institutions worldwide&hellip;. Adobe Flex 2 will be available to qualified education end-users for free download on Adobe.com in early November.</p></blockquote>

<p>You can read the entire press release <a href="http://www.adobe.com/aboutadobe/pressroom/pressreleases/200710/102407adobeflexedu.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting Date Fields in a DataGrid in the Flex Framework]]></title>
    <link href="http://mikechambers.github.io//blog/2005/04/27/sorting-date-fields-in-a-datagrid-in-the-flex-framework/"/>
    <updated>2005-04-27T00:00:00-07:00</updated>
    <id>http://mikechambers.github.io//blog/2005/04/27/sorting-date-fields-in-a-datagrid-in-the-flex-framework</id>
    <content type="html"><![CDATA[<p>I was working on some new mini chart apps over the weekend for the [MXNA reports section][1], and had a DataGrid that contained dates. I wanted to allow the user to sort the datagrid by the DateField, but by default the DataGrid sorts dates with a string compare (calling toString on the Date instance).</p>

<p>I tried to set up a custom sort function for the DataGridColumn instance that contained the dates, but because I was using a custom label format function for the column, Flex passed the labels to me, and not the data items (which would allow me to get access to the Date instance). Because of this, I couldn&#8217;t sort on the date.</p>

<!--more-->


<p>There is an [example on Macromedia.com][2] that shows how to sort by dates, but it requires that you override and implement all sorting for the DataGrid (something which seemed unecessary and overkill to me). Peter Ent also [posted an example][3], but it required massaging the data on the server first, something which was not an option for me since I was using a public web service API.</p>

<p>So, after much trial and error, and help from [Matt Chotin][4], I finally got it working, and figured I would post it here.</p>

<p>Basically, I listen for the headerRelease event for the DataGrid. If it is in response to the date column being clicked, then I sort the dataprovider that the DataGrid is hooked up to (otherwise, I do nothing, and let the DataGrid do the sorting).</p>

<p>Here is an example:</p>

<p>Here is the Code:</p>

<p>&#8212;&#8212;&#8212;-DateSortExample.mxml&#8212;&#8212;&#8212;&ndash;</p>

<p>`</p>

<pre><?xml version="1.0"?>

<mx:Application xmlns:mx="http://www.macromedia.com/2003/mxml" initialize="initTag()"
    backgroundColor="0xFFFFFF" marginTop="0" marginLeft="0" marginRight="0" marginBottom="0">       
    
    <mx:Script source="DateSortExample.as" />   

    <mx:Panel title="DataGrid Date sorting example" width="475" height="350">
    
        <mx:DataGrid id="dg" height="100%" width="100%">
                <mx:columns>
                <mx:Array>
                        <mx:DataGridColumn headerText="Letters" width="50" columnName="letter" />
                        <mx:DataGridColumn headerText="Numbers" width="50" columnName="number" />
                        <mx:DataGridColumn headerText="Dates" columnName="date" />
                   </mx:Array>
                </mx:columns>
        </mx:DataGrid>
    
    </mx:Panel>
</mx:Application></pre>


<p><p>`</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&ndash;</p>

<p>&#8212;&#8212;&#8212;-DateSortExample.as&#8212;&#8212;&#8212;&ndash;</p>

<p>`
<pre></p>

<p>private var dp:Array;
private var sortOrder:Number = 1;</p>

<p>private  function initTag():Void
{</p>

<pre><code>//listend for the headerRelease event on the datagrid, which is broadcast
//when any of the column headers are clicked.
dg.addEventListener("headerRelease",
    mx.utils.Delegate.create(this, onDateHeaderRelease));

dp = new Array();

//pupulate the date grid with some data.
var item:Object;
var randomDay:Number;
var randomMonth:Number;
for(var i:Number = 0; i &lt; 15; i++)
{
    randomDay = Math.floor(Math.random() * 30);
    randomMonth = Math.floor(Math.random() * 12);

    item = new Object();
    item.date = new Date(2005, randomMonth, randomDay);
    item.letter = String.fromCharCode(i + 65);
    item.number = i;

    dp.push(item);
}

//set the dataProvider for the datagrid
dg.dataProvider = dp;
</code></pre>

<p>}</p>

<p>//Note, this should be in a DateUtils class
/*</p>

<pre><code>returns
-1 : first date is larger than the second
 1 : first date is smaller than the second
 0 : Both dates are the same
</code></pre>

<p>*/
private static function compareDates(d1:Date, d2:Date):Number
{</p>

<pre><code>var d1ms:Number = d1.getTime();
var d2ms:Number = d2.getTime();

if(d1ms &gt; d2ms)
{
    return -1;
}
else if(d1ms &lt; d2ms)
{
    return 1;
}
else
{
    return 0;
}
</code></pre>

<p>}</p>

<p>//compares the dates
private function dateFieldCompare(item1:Object, item2:Object, bit:Number):Number
{</p>

<pre><code>//determine which way the column should be sorted (ASC or DESC
var toggle:Number = (bit == Array.DESCENDING)? 1 : -1;

//call compare date function, and then toggle the sort direction
return toggle * compareDates(item1.date,item2.date);
</code></pre>

<p>}</p>

<p>//called when any of the datagrids column headings are clicked
private function onDateHeaderRelease(eventObj:Object):Void
{</p>

<pre><code>//Only sort if the Date column head was clicked
if(eventObj.columnIndex == 2)
{
    //sort the dataProvider directly, passing the function to do the sort
    //and a bit indicating whether to sort ascending or descending
    dp.sortItems(dateFieldCompare, ((sortOrder == 1)? 0: Array.DESCENDING));

    //reverse the sort order so the next time the column is clicked, it is
    //sorted in the reverse order
    sortOrder *= -1;
}
</code></pre>

<p>}</pre>
<p>`</p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&ndash;</p>

<p>You can download the source from [here][5] (or right click on the example).</p>

<p><!-- Creative Commons License --></p>

<p><a rel="license" href="http://creativecommons.org/licenses/by/2.0/"><img alt="Creative Commons License" border="0" src="http://creativecommons.org/images/public/somerights20.gif" /></a></p>

<p>This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/2.0/">Creative Commons License</a>.<br/>
<!-- /Creative Commons License --></p>

<p><!--</p></p>

<p>&lt;rdf:RDF xmlns=&ldquo;<a href="http://web.resource.org/cc/">http://web.resource.org/cc/</a>"<br/>
xmlns:dc="<a href="http://purl.org/dc/elements/1.1/">http://purl.org/dc/elements/1.1/</a>"<br/>
xmlns:rdf="<a href="http://www.w3.org/1999/02/22-rdf-syntax-ns#">http://www.w3.org/1999/02/22-rdf-syntax-ns#</a>&rdquo;><br/>
<Work rdf:about=""><license rdf:resource="http://creativecommons.org/licenses/by/2.0/" /> </Work></p>

<p><License rdf:about="http://creativecommons.org/licenses/by/2.0/"><permits rdf:resource="http://web.resource.org/cc/Reproduction" /> <permits rdf:resource="http://web.resource.org/cc/Distribution" /> <requires rdf:resource="http://web.resource.org/cc/Notice" /></p>

<p><requires rdf:resource="http://web.resource.org/cc/Attribution" /></p> <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" /> </License></p>
&lt;/rdf:RDF><br/>
&#8211;></p>

<p> [1]: <a href="http://weblogs.macromedia.com/mxna/reports/">http://weblogs.macromedia.com/mxna/reports/</a>
 [2]: <a href="http://www.macromedia.com/support/documentation/en/flex/1_5/releasenotes.html#latenews">http://www.macromedia.com/support/documentation/en/flex/1_5/releasenotes.html#latenews</a>
 [3]: /pent/archives/006686.cfm
 [4]: /mchotin/
 [5]: /mesh/files/DateSortExample/DateSortExample.zip</p>
]]></content>
  </entry>
  
</feed>

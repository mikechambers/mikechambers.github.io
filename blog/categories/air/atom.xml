<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Air | Mike Chambers]]></title>
  <link href="http://mikechambers.github.io//blog/categories/air/atom.xml" rel="self"/>
  <link href="http://mikechambers.github.io//"/>
  <updated>2013-12-16T17:07:46-08:00</updated>
  <id>http://mikechambers.github.io//</id>
  <author>
    <name><![CDATA[Mike Chambers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adobe AIR 1.5 for Linux Is Out]]></title>
    <link href="http://mikechambers.github.io//2008/12/18/adobe-air-15-for-linux-is-out/"/>
    <updated>2008-12-18T12:38:01-08:00</updated>
    <id>http://mikechambers.github.io//2008/12/18/adobe-air-15-for-linux-is-out</id>
    <content type="html"><![CDATA[<p>You can read more about it <a href="http://blogs.adobe.com/air/2008/12/adobe_air_15_now_available_for.html">here</a>, and download it <a href="http://get.adobe.com/air/otherversions/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CommandProxy : .NET / AIR Integration Proof of Concept]]></title>
    <link href="http://mikechambers.github.io//2008/01/17/commandproxy-net-air-integration-proof-of-concept/"/>
    <updated>2008-01-17T12:34:01-08:00</updated>
    <id>http://mikechambers.github.io//2008/01/17/commandproxy-net-air-integration-proof-of-concept</id>
    <content type="html"><![CDATA[<p>Two of the most requested features for <a href="http://www.adobe.com/go/air">Adobe AIR</a> have been the ability to launch native executables from an AIR application, and the ability to integrate native libraries into an AIR application. Unfortunately, neither feature will be included in Adobe AIR 1.0.</p>

<p>However, this does not mean that you cannot build an AIR application that has closer / tighter integration with the underlying operating system. This lower level of integration is possible, but it requires some work on your part. I have put together a proof of concept project, which shows how to integrate Adobe AIR applications with c# / .NET code on any operating system that Adobe AIR currently runs on (Mac and Windows). The project is called <a href="http://code.google.com/p/commandproxy/">CommandProxy</a>. It provides a communication proxy between an AIR application and the underlying operating system and could theoretically work with other web based desktop runtimes (such as <a href="http://wiki.mozilla.org/Prism">Mozilla Prism</a>).</p>

<p>Update : I have posted some additional thoughts on this proof of concept <a href="http://www.mikechambers.com/blog/2008/01/22/commandproxy-its-cool-but-is-it-a-good-idea/">here</a>.</p>

<!--more-->


<p>Note, this project is in no way supported by Adobe. This is a proof of concept project that I put together to help developers understand one possible way to extend AIR functionality beyond that that is provided by the runtime.</p>

<p>The general concept behind the project is similar to the <strike>now defunct</strike> <a href="http://artemis.effectiveui.com/">Artemis project</a> (which is Java based). The AIR application communicates with the CommandProxy process to communicate and integrate with the underlying operating system. Currently the command proxy supports launching processes (and getting the output from the processes) as well as taking a screenshot of the user&#8217;s current screen. However, the framework is built in such a manner that it is possible to add new functionality to the proxy.</p>

<p>Here is an overview of the life-cycle of an AIR application using the command proxy.</p>

<p><a href="http://www.flickr.com/photos/mikechambers/2199401003/" title="CommandProxy / AIR Application Lifecycle by mike.chambers, on Flickr"><img src="http://farm3.static.flickr.com/2366/2199401003_55dd51c188.jpg" width="500" height="322" alt="CommandProxy / AIR Application Lifecycle" /></a></p>

<ol>
<li>Command Proxy process is launched by the user. The shortcut for the process passes in the path to the AIR application to launch (or this can be hard coded into the proxy)</li>
<li>The Command Proxy process then launches the AIR application, passing in a communication key, as well as the socket port that the AIR application should use to communicate with the proxy.</li>
<li>The AIR app may then at some point communicate with the proxy to execute a command. For example, it may tell the proxy to launch a specific process.</li>
<li>The proxy executes the specified command.</li>
<li>If appropriate, the proxy then returns any command output back to the AIR application.</li>
<li>The command / response cycle can occur multiple times during the application life-cycle</li>
<li>When the AIR application process is terminated (i.e. the user closes the application), then the proxy process automatically exits.</li>
</ol>


<p>Currently, the project is meant as a proof of concept, and not as a general use framework. This mainly means that there is not a lot of documentation (although the code is fully commented) and if you want to use it, you are going to have to compile the proxy yourself. If there is interest, then I am willing to expand the project to other contributors.</p>

<p>If you wanted to use something like this in a production level application, then you would need to:</p>

<ul>
<li>Compile the CommandProxy</li>
<li>Compile the AIR application</li>
<li>Create the AIR file to install the AIR application</li>
<li>Create a custom installer that first installs the AIR application, and then installs the short cut to the command proxy</li>
</ul>


<p>Instead of launching the AIR application directly, the user would launch the command proxy process, which would then launch the AIR application.</p>

<p>The project is hosted on Google code, and includes the following:</p>

<ul>
<li>Full C# / .NET code, compilable under <a href="http://www.microsoft.com/express/vcsharp/Default.aspx">Visual Studio</a> and <a href="http://www.mono-project.com/Main_Page">Mono</a>. (Screenshots do not work under Mono)</li>
<li>ActionScript 3 library for communicating with the proxy.</li>
<li>Some very basic documentation</li>
</ul>


<p>If you have questions, then post them in the comments and I will try and address them (and maybe create an FAQ on the project page). If there is interest, then I could also create a mail list on Google groups to discuss the project. If you find bugs with the code, then post them on the <a href="http://code.google.com/p/commandproxy/issues/list">project&#8217;s issues page</a>.</p>

<p>I am also hoping to post some examples of AIR apps that use the proxy. <a href="http://www.theflashblog.com">Lee Brimelow</a> built a simple example of an AIR application that takes a screenshot, and then opens it in Photoshop for editing. You can see a demo of that example toward the end of the video posted <a href="http://theflashblog.com/?p=309">here</a> (it is about half way through the video).</p>

<p>Update : The code is released under an <a href="http://www.opensource.org/licenses/mit-license.php">MIT License</a>.</p>

<p>You can find more information on the <a href="http://code.google.com/p/commandproxy/">CommandProxy project page</a>.</p>

<p>Update : I have posted some additional thoughts on the code <a href="http://www.mikechambers.com/blog/2008/01/22/commandproxy-its-cool-but-is-it-a-good-idea/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adobe AIR for JavaScript Developers Translated to Thai]]></title>
    <link href="http://mikechambers.github.io//2007/11/26/adobe-air-for-javascript-developers-translated-to-thai/"/>
    <updated>2007-11-26T12:33:01-08:00</updated>
    <id>http://mikechambers.github.io//2007/11/26/adobe-air-for-javascript-developers-translated-to-thai</id>
    <content type="html"><![CDATA[<p>I just noticed over on the <a href="http://labs.adobe.com/wiki/index.php/AIR:Books:Adobe_Integrated_Runtime_for_JavaScript_Developers">labs wiki</a> that the Adobe AIR For JavaScript Developers Pocket Guide has been <a href="http://lib.blognone.com/Adobe_Integrated_Runtime_(AIR)_for_JavaScript_Developers">translated to Thai</a>.</p>

<p>You can view the full translation <a href="http://lib.blognone.com/Adobe_Integrated_Runtime_(AIR)_for_JavaScript_Developers">here</a>.</p>

<p><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons</a> FTW!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing the Adobe AIR Logo]]></title>
    <link href="http://mikechambers.github.io//2007/11/15/introducing-the-adobe-air-logo/"/>
    <updated>2007-11-15T12:27:01-08:00</updated>
    <id>http://mikechambers.github.io//2007/11/15/introducing-the-adobe-air-logo</id>
    <content type="html"><![CDATA[<p>If you have been following <a href="http://www.adobe.com/go/air">Adobe AIR</a> during its young lifetime, then you have probably noticed that it has been pretty inconsistent as far as branding goes. It has had a number of logos and graphics associated with it, including the rocket-ship, and the current &#8220;AIR&#8221; branding.</p>

<p>Part of this was due to the surprisingly complex process of designing and settling on a logo in the technology world. There have been quite a few times during the past year where we felt that we were close to having the final logo, only to then find out that it was just a bit too familiar to some other logo in the computer / internet / tech world.</p>

<p>Well, I am happy to say that we have the final logo. I had the honor of showing it for the first time today, at the <a href="http://www.flexeurs.org/rencontre-avec-mike-chambers-et-lee-brimelow-a-l-occasion-du-air-user-group-tour.html">Adobe User group meeting in Paris</a>.</p>

<!--more-->


<p><a href="http://www.flickr.com/photos/mikechambers/2034394938/" title="Adobe AIR 1.0 Logo by mike.chambers, on Flickr"><img src="http://farm3.static.flickr.com/2074/2034394938_9e36bcefe2.jpg" width="500" height="264" alt="Adobe AIR 1.0 Logo" /></a></p>

<p>I am not going to go into a detailed analysis of what the logo represents, but I do want to point out one of the core concepts behind the logo. Adobe AIR is built on top of three core web technologies (HTML, Flash and PDF), and we wanted the logo to represent this. Thus, each corner of the logo represents one of these core technologies.</p>

<p>We are going to be posting some &#8220;Download Adobe AIR&#8221; Badges (88 x 33) over the next couple of days in case you want to show your support for AIR. Feel free to build you own (if you do, post them in the comments). Who knows, if there is enough interest, maybe we will have a contest to see who can make the best Adobe AIR badge or desktop wallpaper (post in the comments if you are interested). (I will upload an vector version of the logo shortly).</p>

<p>One last note. Normally, this is the type of information and news that we would post on the main website and not on a weblog. However, we know that the success of Adobe AIR is dependent on developers and the applications and content that they create. As we have learned from Adobe Reader and the Flash Player, content drives adoption. This is why we are posting the logo here first. We wanted the developer community to be the first to see the new logo.</p>

<p>You can find out more information on <a href="http://www.adobe.com/go/air">Adobe AIR on Adobe Labs</a>.</p>

<p>Update : You can download vector versions of the logo <a href="http://www.mikechambers.com/blog/files/adobe_air_logo.zip">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the HTMLControl Class in Adobe AIR to Parse HTML as a Data Source]]></title>
    <link href="http://mikechambers.github.io//2007/11/09/using-the-htmlcontrol-in-adobe-air-to-parse-html-as-a-data-source/"/>
    <updated>2007-11-09T12:57:01-08:00</updated>
    <id>http://mikechambers.github.io//2007/11/09/using-the-htmlcontrol-in-adobe-air-to-parse-html-as-a-data-source</id>
    <content type="html"><![CDATA[<p>One of the cool features of Adobe AIR (especially for Flash developers) is its ability to render full featured HTML within Flash content. The rendering is handled by the WebKit core, and the HTML content can be from both local and remote URLs as well as from a string of HTML text.</p>

<p>HTML rendering within Flash content is handled by the ActionScript HTMLControl class (which is wrapped by the HTML component in Flex). The HTMLControl class is a DisplayObject instance (it directly inherits from Sprite) and thus renders its HTML directly to the display list.</p>

<p>However, it is possible to load HTML content into an HTMLControl instance, without placing it on the display list to be displayed. HTML content is still loaded and executed, and its DOM is exposed to the scripting environment. This means that you can essentially use the HTMLControl to load and parse HTML with the sole purpose of retrieving data from the HTML&hellip; i.e. using the HTMLControl you can treat HTML as a data source, as if it was XML.</p>

<!--more-->


<p>This is done by leveraging the JavaScript APIs within HTML for manipulating the HTML DOM.</p>

<p>Below is a simple example that loads some HTML, and then uses various JavaScript DOM APIs to extract data and information from the HTML. Note that the HTML is never displayed or rendered to the screen.</p>

<p>index.html<br/>
`</p>

<pre><html>
<head>
    <title>Example HTML Page</title>
</head>
<body>
    <h1>Title 1</h1>
    <p>This is some sample text for title 1</p>

    <p id="foo">This is the foo id</p>
    <p><a href="http://onair.adobe.com">onair</a></p>
    <p><a href="http://www.adobe.com/go/air">Adobe AIR</a></p>

    <ul>
        <li>List Item A</li>
        <li>List Item b</li>
    </ul>

</body>
</pre>


<p><p>`</p>

<p>HTMLParsingExample.mxml<br/>
`
<pre>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;mx:WindowedApplication xmlns:mx=&ldquo;<a href="http://www.adobe.com/2006/mxml">http://www.adobe.com/2006/mxml</a>&rdquo;</p>

<pre><code>layout="absolute"&gt;

&lt;mx:Script&gt;
    &lt;![CDATA[
        private var html:HTMLControl;
        private function onLoadAndParseClick():void
        {
            html = new HTMLControl();
            html.addEventListener(Event.COMPLETE, onHTMLLoadComplete);
            html.load(new URLRequest("app-resource:/index.html"));  
        }

        private function onHTMLLoadComplete(e:Event):void
        {
            //get a reference to the top level html document
            var document:JavaScriptObject = html.window.document;

            /********** find number of links in html page ************/

            //grab all of the links in the document
            var a:JavaScriptObject = document.links;

            //get the length
            var len:int = a.length;

            trace(len + " links in html page.");

            /*********** Find element by ID and get its value ***********/
            var foo:JavaScriptObject = document.getElementById("foo");
            trace(foo.innerText);

            /*********** Use the document DOM parsing API to parse out LI items **********/

            //get all of the UL items
            var lists:JavaScriptObject = document.getElementsByTagName("ul");

            //make sure we found some
            if(lists.length &gt; 0)
            {
                //grab the first one
                var ul:JavaScriptObject = lists[0];

                //get the child nodes
                var childNodes:JavaScriptObject = ul.childNodes;

                var childLen:int = childNodes.length;
                var tempNode:JavaScriptObject;

                //loop through the nodes looking for LI elements
                for(var j:int = 0; j &lt; childLen; j++)
                {
                    tempNode = childNodes[j];
                    if(String(tempNode.nodeName).toLowerCase() == "li")
                    {
                        //print the value of the LI element
                        trace("LI Found : " + tempNode.innerHTML);
                    }
                }                       

            }   
        }

    ]]&gt;
&lt;/mx:Script&gt;

&lt;mx:Button label="Load and Parse" right="10" bottom="10" click="onLoadAndParseClick()"/&gt;
</code></pre>

<p>&lt;/mx:WindowedApplication>
</pre>
<p>`</p>

<p>One thing to remember is that when working with the JavaScript APIs from within ActionScript, most of the APIs return JavaScriptObject, JavaScriptArray, and JavaScriptFunction instances (and not ActionScript Objects, Arrays and Functions).</p>

<p>You can view the API docs for all of the AIR classes [here][1].</p>

<p> [1]: <a href="http://livedocs.adobe.com/labs/flex3/langref/index.html">http://livedocs.adobe.com/labs/flex3/langref/index.html</a></p>
]]></content>
  </entry>
  
</feed>
